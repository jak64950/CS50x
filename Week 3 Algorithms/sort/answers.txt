sort1 uses: Bubble Sort

How do you know?: First indication that it is bubble sort is the larger range of times for data sets with different sorting methods. Bubble sort max steps are n^2 and min steps are n (if data already started). The times are consistent with this when compared to sort2 and sort3 as (on average) it had the shortest times for the sorted data.

sort2 uses: Merge Sort

How do you know?: For merge sort, it takes nlogn steps regardless of how the data is sorted, so would expect similiar times for a given quantity of data. It was also much faster sorting random and reversed data sets which is consistent given the max steps is always nlogn, whereas bubble and selection sort is n^2.

sort3 uses: Selection Sort

How do you know?: For selection sort, it takes n^2 steps regardless of how the data is sorted, so would expect similiar times for a given quantity of data. This excluded sort1. Comparing times to sort2, sort2 also had similar times for a given quantity of data, but much less than that of sort3. Given merge sort only uses nlogn steps it would make sense that sort2 was merge sort and sort3 was selection sort.
